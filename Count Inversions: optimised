#include <bits/stdc++.h>

int merge(long long *arr, int low,int mid,int high){
    int cnt=0;
    int left= low;
    int right= mid+1;
    vector<int>vec;
    while(left<= mid && right<= high){
        if(arr[left]<= arr[right]){
            vec.push_back(arr[left]);
            left++;
        }
        else{
            vec.push_back(arr[right]);
            cnt += (mid-left+1);
            right++;
        }
    }
    while(left<= mid){
        vec.push_back(arr[left]);
        left++;
    }
    while( right<= high){
        vec.push_back(arr[right]);
        right++;
    }
    for(int i=low;i<= high;i++){
        arr[i]= vec[i-low];
    }
    return cnt;


}
int mergeSort(long long *arr, int low,int high){
    int cnt=0;
    if(low>=high){
        return cnt;
    }
    int mid= (low+high)/2;
    cnt += mergeSort(arr, low, mid);
   cnt+= mergeSort(arr,mid+1,high);
   cnt+= merge(arr,low,mid,high);
   return cnt;

}

long long getInversions(long long *arr, int n){
   
    return mergeSort(arr,0,n-1);

}
